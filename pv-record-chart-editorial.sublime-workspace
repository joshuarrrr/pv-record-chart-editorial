{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"mar",
				"margin-bottom"
			],
			[
				"pad",
				"padding-bottom"
			],
			[
				"pa",
				"padding-left"
			],
			[
				"fon",
				"font-weight"
			],
			[
				"max",
				"max-width"
			],
			[
				"d3.sele",
				"d3.selectAll"
			],
			[
				"chartElement.of",
				"chartElement.offsetTop"
			],
			[
				"el.",
				"description-Element.id"
			],
			[
				"graphic",
				"graphic_config"
			],
			[
				"do",
				"download_airtable_sheets"
			],
			[
				"downl",
				"download_google_sheet"
			],
			[
				"cons",
				"console.log()"
			],
			[
				"airtable",
				"airtable_read_endpoint"
			],
			[
				"font",
				"font-size"
			],
			[
				"marg",
				"margin-bottom"
			],
			[
				"padding",
				"padding-bottom"
			],
			[
				"bloc",
				"blockquote-border"
			],
			[
				"margin",
				"margin-top"
			],
			[
				"padd",
				"padding-left"
			],
			[
				"paddin",
				"padding-bottom"
			],
			[
				"par",
				"paragraph-margin-bottom"
			],
			[
				"fo",
				"font-style"
			],
			[
				"font-",
				"font-size"
			],
			[
				"inlin",
				"inline-block"
			],
			[
				"inl",
				"inline-block"
			],
			[
				"tex",
				"text-align"
			],
			[
				"te",
				"text-align"
			],
			[
				"text",
				"text-align"
			],
			[
				"text-",
				"text-transform"
			],
			[
				"print",
				"print_r"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "// Global config\nvar SIDEBAR_THRESHOLD = 280;\n\n// Global vars\nvar pymChild = null;\nvar isMobile = false;\nvar isSidebar = false;\n\n/*\n * Initialize graphic\n */\nvar onWindowLoaded = function() {\n    if (Modernizr.svg) {\n        formatData();\n\n        pymChild = new pym.Child({\n            renderCallback: render\n        });\n    } else {\n        pymChild = new pym.Child({});\n    }\n};\n\n/*\n * Format graphic data for processing by D3.\n */\nvar formatData = function() {\n    DATA = AIRTABLE_DATA['records'];\n\n    DATA = d3.nest()\n        .key(function(d) {\n            return d['fields']['Cell type'];\n            // return d['fields']['Cell category'];\n        })\n        .sortValues(function(a,b) {\n            return cmp(a['fields']['Date'],b['fields']['Date']) ||\n                cmp(+a['fields']['Efficiency (%)'],+b['fields']['Efficiency (%)']);\n        })\n        .entries(DATA);\n\n    DATA.forEach(function(d) {\n        var cellData = AIRTABLE_DATA['cell-types'].find(function(name) {\n            return name.id === d.key;\n        })['fields'];\n\n        var cellCategory = AIRTABLE_DATA['cell-categories'].find(function(name) {\n                // console.log(name);\n                return name.id === cellData['Category'][0];\n            })['fields']['Name'];\n\n        // var cellCategory = AIRTABLE_DATA['cell-categories'].find(function(name) {\n        //         console.log(name);\n        //         return name.id === d.key;\n        //     })['fields']['Name'];\n\n        d['start'] = d3.min(d['values'], function(v)  {\n            return v['fields']['Efficiency (%)'];\n        });\n        d['end'] = d3.max(d['values'], function(v)  {\n            return v['fields']['Efficiency (%)'];\n        });\n        d['change'] = d['end'] - d['start'];\n        d['fullName'] = cellCategory + ' - ' + cellData['Cell type'];\n        d['label'] = cellData['Cell type'];\n        d['category'] = cellCategory;\n        // d['label'] = cellCategory;\n    });\n\n    console.log(DATA);\n};\n\n/*\n * Render the graphic(s). Called by pym with the container width.\n */\nvar render = function(containerWidth) {\n    if (!containerWidth) {\n        containerWidth = DEFAULT_WIDTH;\n    }\n\n    if (containerWidth <= MOBILE_THRESHOLD) {\n        isMobile = true;\n    } else {\n        isMobile = false;\n    }\n\n    if (containerWidth <= SIDEBAR_THRESHOLD) {\n        isSidebar = true;\n    } else {\n        isSidebar = false;\n    }\n\n    // Render the chart!\n    renderSlopegraph({\n        container: '#slopegraph',\n        width: containerWidth,\n        data: DATA.sort(function(a,b) {\n            return b.end - a.end;\n        }),\n        labels: LABELS\n    });\n\n    // Render the chart!\n    renderBarChart({\n        container: '#bar-chart',\n        width: containerWidth,\n        data: DATA.sort(function(a,b) {\n            return b.end - a.end;\n        })\n    });\n\n    // Update iframe\n    if (pymChild) {\n        pymChild.sendHeight();\n    }\n};\n\n/*\n * Render a line chart.\n */\nvar renderSlopegraph = function(config) {\n    /*\n     * Setup\n     */\n    var labelColumn = 'fullName';\n    var startColumn = 'start';\n    var endColumn = 'end';\n    var categoryColumn = 'category';\n    var changeColumn = 'change';\n    var fullName = 'fullName';\n    var filteredData = config['data'].filter(function(d) { return d[changeColumn] > 5; });\n\n    // var startLabel = config['labels']['start_label'];\n    // var endLabel = config['labels']['end_label'];\n    var startLabel = d3.min(config['data'], function(series) {\n        var minDate = d3.min(series['values'], function(d) {\n            // console.log(d['fields']['Date']);\n            var minYear = d['fields']['Date'];\n            if ( !minYear ) { return; }\n            minYear = minYear.slice(-2);\n            // console.log(minYear);\n            if( +minYear >= 69) {\n                minYear = +('19' + minYear);\n                // console.log(minYear);\n                // return minYear;\n                return;\n            }\n            else {\n                minYear = +('20' + minYear);\n                // console.log(minYear);\n                return minYear;\n            } \n        });\n        return minDate;\n    });\n    var endLabel = d3.max(config['data'], function(series) {\n        var maxDate = d3.max(series['values'], function(d) {\n            var maxYear = d['fields']['Date'];\n            if ( !maxYear ) { return; }\n            maxYear = maxYear.slice(-2);\n            if( +maxYear >= 69) {\n                maxYear = +('19' + maxYear);\n                // console.log(maxYear);\n                return maxYear;\n            }\n            else {\n                maxYear = +('20' + maxYear);\n                // console.log(maxYear);\n                return maxYear;\n            } \n        });\n        return maxDate;\n    });\n\n    var aspectWidth = 5;\n    var aspectHeight = 3;\n\n    var margins = {\n        top: 20,\n        right: 185,\n        bottom: 20,\n        left: 40\n    };\n\n    var ticksX = 2;\n    var ticksY = 10;\n    var roundTicksFactor = 4;\n    var dotRadius = 3;\n    var labelGap = 42;\n\n    // Mobile\n    if (isSidebar) {\n        aspectWidth = 2;\n        aspectHeight = 3;\n        margins['left'] = 30;\n        margins['right'] = 105;\n        labelGap = 32;\n    } else if (isMobile) {\n        aspectWidth = 2.5;\n        aspectHeight = 3;\n        margins['right'] = 145;\n    }\n\n    // Calculate actual chart dimensions\n    var chartWidth = config['width'] - margins['left'] - margins['right'];\n    var chartHeight = Math.ceil((config['width'] * aspectHeight) / aspectWidth) - margins['top'] - margins['bottom'];\n\n    // Clear existing graphic (for redraw)\n    var containerElement = d3.select(config['container']);\n    containerElement.html('');\n\n    /*\n     * Create D3 scale objects.\n     */\n    var xScale = d3.scale.ordinal()\n        .domain([startLabel, endLabel])\n        .range([0, chartWidth]);\n\n    var min = d3.min(config['data'], function(d) {\n        var rowMin = d3.min([d[startColumn], d[endColumn]]);\n        return Math.floor(rowMin / roundTicksFactor) * roundTicksFactor;\n    });\n\n    var max = d3.max(config['data'], function(d) {\n        var rowMax = d3.max([d[startColumn], d[endColumn]]);\n        return Math.ceil(rowMax / roundTicksFactor) * roundTicksFactor;\n    });\n\n    var yScale = d3.scale.linear()\n        .domain([min, max])\n        .range([chartHeight, 0]);\n\n    var colorScale = d3.scale.ordinal()\n        .domain(_.pluck(config['data'], categoryColumn))\n        .range([COLORS['dark red'], COLORS['dark green'], COLORS['light blue'], COLORS['orange'], COLORS['teal']]);\n\n    var changeScale = d3.scale.threshold()\n        .domain([2.5, 5])\n        .range([0.2,0.4,1]);\n    /*\n     * Create D3 axes.\n     */\n    var xAxisTop = d3.svg.axis()\n        .scale(xScale)\n        .orient('top')\n        .ticks(ticksX)\n        .tickFormat(function(d) {\n            return d;\n        });\n\n    var xAxis = d3.svg.axis()\n        .scale(xScale)\n        .orient('bottom')\n        .ticks(ticksX)\n        .tickFormat(function(d) {\n            return d;\n        });\n\n    /*\n     * Create the root SVG element.\n     */\n    var chartWrapper = containerElement.append('div')\n        .attr('class', 'graphic-wrapper');\n\n    var chartElement = chartWrapper.append('svg')\n        .attr('width', chartWidth + margins['left'] + margins['right'])\n        .attr('height', chartHeight + margins['top'] + margins['bottom'])\n        .append('g')\n        .attr('transform', 'translate(' + margins['left'] + ',' + margins['top'] + ')');\n\n    /*\n     * Render axes to chart.\n     */\n     chartElement.append('g')\n         .attr('class', 'x axis')\n         .call(xAxisTop);\n\n    chartElement.append('g')\n        .attr('class', 'x axis')\n        .attr('transform', makeTranslate(0, chartHeight))\n        .call(xAxis);\n\n    /*\n     * Render the HTML legend.\n     */\n    d3.select('#legend').html('');\n    var legend = d3.select('#legend')\n        .attr('class', 'key')\n        .selectAll('g')\n        // .data(config['data'])\n        .data(colorScale.domain())\n        .enter().append('li')\n            .attr('class', function(d, i) {\n                return 'key-item ' + classify(d);\n            });\n\n    legend.append('b')\n        .style('background-color', function(d) {\n            return colorScale(d);\n        });\n\n    legend.append('label')\n        .text(function(d) {\n            return d;\n        });\n\n    /*\n     * Render lines to chart.\n     */\n    var slopes = chartElement.append('g')\n        .attr('class', 'slopes')\n        .selectAll('.slope')\n        .data(config['data'])\n        .enter()\n        .append('g')\n            .attr('class', 'slope' )\n            .style('opacity', function(d) {\n                return changeScale(d[changeColumn]);\n            });\n\n    slopes.append('line')\n        .attr('class', function(d, i) {\n            return 'line ' + classify(d[labelColumn]);\n        })\n        .attr('x1', xScale(startLabel))\n        .attr('y1', function(d) {\n            return yScale(d[startColumn]);\n        })\n        .attr('x2', xScale(endLabel))\n        .attr('y2', function(d) {\n            return yScale(d[endColumn]);\n        })\n        .style('stroke', function(d) {\n            return colorScale(d[categoryColumn]);\n        });\n\n    /*\n     * Uncomment if needed:\n     * Move a particular line to the front of the stack\n     */\n    // svg.select('line.unaffiliated').moveToFront();\n\n\n    /*\n     * Render dots to chart.\n     */\n    slopes.append('circle')\n        .attr('cx', xScale(startLabel))\n        .attr('cy', function(d) {\n            return yScale(d[startColumn]);\n        })\n        .attr('class', function(d) {\n            return 'start ' + classify(d[labelColumn]);\n        })\n        .attr('r', dotRadius)\n        .style('fill', function(d) {\n            return colorScale(d[categoryColumn]);\n        });\n\n    slopes.append('circle')\n        .attr('cx', xScale(endLabel))\n        .attr('cy', function(d) {\n            return yScale(d[endColumn]);\n        })\n        .attr('class', function(d) {\n            return 'end ' + classify(d[labelColumn]);\n        })\n        .attr('r', dotRadius)\n        .style('fill', function(d) {\n            return colorScale(d[categoryColumn]);\n        });\n\n    var hovered = false;\n\n    slopes.on('mouseover', function() {\n        var el = d3.select(this);\n        var d = el.datum();\n\n        el\n            .style('opacity', 1);\n\n        if (d[changeColumn] > 5) {\n            return;\n        }\n        if (hovered === true) {\n            filteredData.pop(d3.select(this).datum());\n            renderLabels();\n        }\n\n        filteredData.push(d);\n        renderLabels();\n        // console.log(filteredData.length);\n\n        hovered = true;\n    });\n\n    slopes.on('mouseout', function() {\n        var el = d3.select(this);\n        var d = el.datum();\n\n        el\n            .style('opacity', function(d) {\n                return changeScale(d[changeColumn]);\n            });\n\n        if (d[changeColumn] > 5) {\n            return;\n        }\n        if (hovered === true) {\n            filteredData.pop(d3.select(this).datum());\n            renderLabels();\n            // console.log(filteredData.length);\n        }\n        hovered = false;\n    });\n\n    var startValueGroup = chartElement.append('g')\n        .attr('class', 'value start');\n    var endValueGroup = chartElement.append('g')\n        .attr('class', 'value end');\n    var labelGroup = chartElement.append('g')\n        .attr('class', 'label');\n\n    function renderLabels() {\n        /*\n         * Render values.\n         */\n        var startValueLabels = startValueGroup\n            .selectAll('text')\n            .data(filteredData, function(d) { return d[fullName]; });\n\n        startValueLabels.enter()\n            .append('text');\n\n        startValueLabels.sort(function(a,b) {\n                return b['start'] - a['start'];\n            });\n\n        startValueLabels\n            .attr('x', xScale(startLabel))\n            .attr('y', function(d) {\n                return yScale(d[startColumn]);\n            })\n            .attr('text-anchor', 'end')\n            .attr('dx', -6)\n            .attr('dy', 3)\n            .attr('class', function(d) {\n                return classify(d[labelColumn]);\n            })\n            .text(function(d) {\n                if (isSidebar) {\n                    return d[startColumn].toFixed(0) + '%';\n                }\n\n                return d[startColumn].toFixed(1) + '%';\n            });\n\n        startValueLabels.exit().remove();\n\n        var endValueLabels = endValueGroup\n            .selectAll('text')\n            .data(filteredData, function(d) { return d[fullName]; });\n\n        endValueLabels.enter()\n            .append('text');\n\n        endValueLabels.sort(function(a,b) {\n                return b['end'] - a['end'];\n            });\n\n        endValueLabels\n            .attr('x', xScale(endLabel))\n            .attr('y', function(d) {\n                return yScale(d[endColumn]);\n            })\n            .attr('text-anchor', 'begin')\n            .attr('dx', 6)\n            .attr('dy', 3)\n            .attr('class', function(d) {\n                return classify(d[labelColumn]);\n            })\n            .text(function(d) {\n                if (isSidebar) {\n                    return d[endColumn].toFixed(0) + '%';\n                }\n\n                return d[endColumn].toFixed(1) + '%';\n            });\n\n        endValueLabels.exit().remove();\n\n        /*\n         * Render labels.\n         */\n        var textLabels = labelGroup\n            .selectAll('text')\n            .data(filteredData, function(d) { return d[fullName]; });\n\n        textLabels.enter()\n            .append('text');\n\n        textLabels.sort(function(a,b) {\n                return b['end'] - a['end'];\n            });\n\n        textLabels\n            .attr('x', xScale(endLabel))\n            .attr('y', function(d) {\n                return yScale(d[endColumn]);\n            })\n            .attr('text-anchor', 'begin')\n            .attr('dx', function(d) {\n                return labelGap;\n            })\n            .attr('dy', function(d) {\n                return 3;\n            })\n            .attr('class', function(d, i) {\n                return classify(d[labelColumn]);\n            })\n            .text(function(d) {\n                return d[labelColumn];\n            })\n            .call(wrapText, (margins['right'] - labelGap), 16);\n\n        textLabels.exit().remove();\n\n        // Function for repositioning overlapping labels\n        var alpha = 0.5; // how much to move labels in each iteration\n        var spacing = 16; // miminum space required\n\n        function relax(items) {\n            again = false;\n            items.each(function (d, i) {\n                var a = this;\n                var da = d3.select(a);\n                var y1 = da.attr('y');\n                var daChildren = da.selectAll('tspan');\n                var totalSpace;\n                if (daChildren.size() > 0) {\n                    totalSpace = daChildren.size() * spacing;\n                }\n                else {\n                    totalSpace = spacing;\n                }\n\n                items.each(function (d, j) {\n                    var b = this;\n                    // a & b are the same element and don't collide.\n                    if (a == b) return;\n                    var db = d3.select(b);\n                    var dbChildren = db.selectAll('tspan');\n                    // Now let's calculate the distance between\n                    // these elements.\n                    y2 = db.attr('y');\n                    deltaY = y1 - y2;\n\n                    if (deltaY > 0 && dbChildren.size() > 0) {\n                        totalSpace = dbChildren.size() * spacing;\n                    }\n\n                    // Our spacing is greater than our specified spacing,\n                    // so they don't collide.\n                    if ( Math.abs(deltaY) > totalSpace ) return;\n\n                    // If the labels collide, we'll push each\n                    // of the two labels up and down a little bit.\n                    again = true;\n                    sign = deltaY > 0 ? 1 : -1;\n                    adjust = sign * alpha;\n                    da.attr('y',+y1 + adjust);\n                    db.attr('y',+y2 - adjust);\n                    daChildren.attr('y',+y1 + adjust);\n                    dbChildren.attr('y',+y2 - adjust);\n                });\n            });\n            // Adjust our line leaders here\n            // so that they follow the labels.\n            if(again) {\n                // labelElements = textLabels[0];\n                // textLines.attr(\"y2\",function(d,i) {\n                //     labelForLine = d3.select(labelElements[i]);\n                //     return labelForLine.attr(\"y\");\n                // });\n                setTimeout(relax(items),20);\n            }\n        }\n\n        relax(startValueLabels);\n        relax(endValueLabels);\n        relax(textLabels);\n    }\n\n    renderLabels();\n\n};\n\n/*\n * Render a bar chart.\n */\nvar renderBarChart = function(config) {\n    /*\n     * Setup\n     */\n    var labelColumn = 'fullName';\n    var valueColumn = 'end';\n    var categoryColumn = 'category';\n\n    var barHeight = 40;\n    var barGap = 5;\n    var labelWidth = 220;\n    var labelMargin = 6;\n    var valueGap = 6;\n\n    var margins = {\n        top: 0,\n        right: 15,\n        bottom: 20,\n        // left: (labelWidth + labelMargin)\n        left: 40\n    };\n\n    var ticksX = 4;\n    var roundTicksFactor = 5;\n\n    // Calculate actual chart dimensions\n    var chartWidth = config['width'] - margins['left'] - margins['right'];\n    var chartHeight = ((barHeight + barGap) * config['data'].length);\n\n    if (isMobile) {\n        labelColumn = 'label';\n        labelWidth = chartWidth / 2;\n        // barHeight = 60;\n    }\n\n    // Clear existing graphic (for redraw)\n    var containerElement = d3.select(config['container']);\n    containerElement.html('');\n\n    /*\n     * Create the root SVG element.\n     */\n    var chartWrapper = containerElement.append('div')\n        .attr('class', 'graphic-wrapper');\n\n    var chartElement = chartWrapper.append('svg')\n        .attr('width', chartWidth + margins['left'] + margins['right'])\n        .attr('height', chartHeight + margins['top'] + margins['bottom'])\n        .append('g')\n        .attr('transform', 'translate(' + margins['left'] + ',' + margins['top'] + ')');\n\n    //Pattern injection\n    var pattern = chartElement.append('defs')\n        .append('pattern')\n            .attr({ id:'stripe-pattern', width:'8', height:'8', patternUnits:'userSpaceOnUse', patternTransform:'rotate(60)'})\n        .append('rect')\n            .attr({ width:'2', height:'8', transform:'translate(0,0)', fill:'#fff' });\n    /*\n     * Create D3 scale objects.\n     */\n    var min = d3.min(config['data'], function(d) {\n        return Math.floor(d[valueColumn] / roundTicksFactor) * roundTicksFactor;\n    });\n\n    if (min > 0) {\n        min = 0;\n    }\n\n    var max = d3.max(config['data'], function(d) {\n        return Math.ceil(d[valueColumn] / roundTicksFactor) * roundTicksFactor;\n    });\n\n    var xScale = d3.scale.linear()\n        .domain([min, max])\n        .range([0, chartWidth]);\n\n    var colorScale = d3.scale.ordinal()\n        .domain(_.pluck(config['data'], categoryColumn))\n        .range([ COLORS['red3'], COLORS['yellow3'], COLORS['blue3'], COLORS['orange3'], COLORS['teal3'] ]);\n\n    /*\n     * Create D3 axes.\n     */\n    var xAxis = d3.svg.axis()\n        .scale(xScale)\n        .orient('bottom')\n        .ticks(ticksX)\n        .tickFormat(function(d) {\n            return d.toFixed(0) + '%';\n        });\n\n    /*\n     * Render axes to chart.\n     */\n    chartElement.append('g')\n        .attr('class', 'x axis')\n        .attr('transform', makeTranslate(0, chartHeight))\n        .call(xAxis);\n\n    /*\n     * Render grid to chart.\n     */\n    var xAxisGrid = function() {\n        return xAxis;\n    };\n\n    chartElement.append('g')\n        .attr('class', 'x grid')\n        .attr('transform', makeTranslate(0, chartHeight))\n        .call(xAxisGrid()\n            .tickSize(-chartHeight, 0, 0)\n            .tickFormat('')\n        );\n\n    /*\n     * Render bars to chart.\n     */\n    chartElement.append('g')\n        .attr('class', 'bars')\n        .selectAll('rect')\n        .data(config['data'])\n        .enter()\n        .append('rect')\n            .attr('x', function(d) {\n                if (d[valueColumn] >= 0) {\n                    return xScale(0);\n                }\n\n                return xScale(d[valueColumn]);\n            })\n            .attr('width', function(d) {\n                return Math.abs(xScale(0) - xScale(d[valueColumn]));\n            })\n            .attr('y', function(d, i) {\n                return i * (barHeight + barGap);\n            })\n            .attr('height', barHeight)\n            .attr('class', function(d, i) {\n                return 'bar-' + i + ' ' + classify(d[labelColumn]);\n            })\n            .style('fill', function(d) {\n                return colorScale(d[categoryColumn])\n            });\n\n    /*\n     * Render pattern bars to chart.\n     */\n    chartElement.append('g')\n        .attr('class', 'patterns')\n        .selectAll('rect')\n        .data(config['data'])\n        .enter()\n        .append('rect')\n            .attr('x', function(d) {\n                if (d[valueColumn] >= 0) {\n                    return xScale(0);\n                }\n\n                return xScale(d[valueColumn]);\n            })\n            .attr('width', function(d) {\n                return Math.abs(xScale(0) - xScale(d[valueColumn]));\n            })\n            .attr('y', function(d, i) {\n                return i * (barHeight + barGap);\n            })\n            .attr('height', barHeight)\n            .attr('class', function(d, i) {\n                return 'bar-' + i + ' ' + classify(d[labelColumn]);\n            })\n            .style('fill', function(d) {\n                if ( !d[labelColumn].match(/non-concentrator/) && d[labelColumn].match(/concentrator/) ) {\n                    return 'url(#stripe-pattern)';\n                }\n                else {\n                    return 'rgba(0,0,0,0)'; \n                }\n                return colorScale(d[categoryColumn])\n            });\n\n    /*\n     * Render 0-line.\n     */\n    if (min < 0) {\n        chartElement.append('line')\n            .attr('class', 'zero-line')\n            .attr('x1', xScale(0))\n            .attr('x2', xScale(0))\n            .attr('y1', 0)\n            .attr('y2', chartHeight);\n    }\n\n    /*\n     * Render bar labels.\n     */\n    chartWrapper.append('ul')\n        .attr('class', 'labels')\n        .attr('style', formatStyle({\n            'width': labelWidth + 'px',\n            'top': margins['top'] + 'px',\n            'left': '0'\n        }))\n        .selectAll('li')\n        .data(config['data'])\n        .enter()\n        .append('li')\n            .attr('style', function(d, i) {\n                if ( xScale(d[valueColumn]) < labelWidth && d[valueColumn] < .5 * chartWidth ) {\n                    return formatStyle({\n                        'width': (chartWidth - xScale(d[valueColumn]) - 32) + 'px',\n                        'height': barHeight + 'px',\n                        'left': (xScale(d[valueColumn]) + 32) + 'px',\n                        'top': (i * (barHeight + barGap)) + 'px;',\n                    });\n                }\n                else {\n                    return formatStyle({\n                        'width': labelWidth + 'px',\n                        'height': barHeight + 'px',\n                        'left': '0px',\n                        'top': (i * (barHeight + barGap)) + 'px;',\n                    });\n                }\n            })\n            .attr('class', function(d) {\n                if ( xScale(d[valueColumn]) < labelWidth && d[valueColumn] < .5 * chartWidth ) {\n                    return classify(d[labelColumn]) + \" outside\";\n                }\n                else {\n                    return classify(d[labelColumn]);\n                }\n            })\n            .append('span')\n                .text(function(d) {\n                    return d[labelColumn];\n                })\n            .style('background', function(d) {\n                return colorScale(d[categoryColumn])\n            });\n\n    /*\n     * Render bar values.\n     */\n    chartElement.append('g')\n        .attr('class', 'value')\n        .selectAll('text')\n        .data(config['data'])\n        .enter()\n        .append('text')\n            .text(function(d) {\n                return d[valueColumn].toFixed(0) + '%';\n            })\n            .attr('x', function(d) {\n                return xScale(d[valueColumn]);\n            })\n            .attr('y', function(d, i) {\n                return i * (barHeight + barGap);\n            })\n            .attr('dx', function(d) {\n                var xStart = xScale(d[valueColumn]);\n                var textWidth = this.getComputedTextLength()\n\n                // Negative case\n                if (d[valueColumn] < 0) {\n                    var outsideOffset = -(valueGap + textWidth);\n\n                    if (xStart + outsideOffset < 0) {\n                        d3.select(this).classed('in', true)\n                        return valueGap;\n                    } else {\n                        d3.select(this).classed('out', true)\n                        return outsideOffset;\n                    }\n                // Positive case\n                } else {\n                    if (xStart + valueGap + textWidth > chartWidth) {\n                        d3.select(this).classed('in', true)\n                        return -(valueGap + textWidth);\n                    } else {\n                        d3.select(this).classed('out', true)\n                        return valueGap;\n                    }\n                }\n            })\n            .attr('dy', (barHeight / 2) + 3)\n}\n\n/*\n * Wrap a block of text to a given width\n * via http://bl.ocks.org/mbostock/7555321\n */\nvar wrapText = function(texts, width, lineHeight) {\n    texts.each(function() {\n        var text = d3.select(this);\n        var words = text.text().split(/\\s+/).reverse();\n\n        var word = null;\n        var line = [];\n        var lineNumber = 0;\n\n        var x = text.attr('x');\n        var y = text.attr('y');\n\n        var dx = parseFloat(text.attr('dx'));\n        var dy = parseFloat(text.attr('dy'));\n\n        var tspan = text.text(null)\n            .append('tspan')\n            .attr('x', x)\n            .attr('y', y)\n            .attr('dx', dx + 'px')\n            .attr('dy', dy + 'px');\n\n        while (word = words.pop()) {\n            line.push(word);\n            tspan.text(line.join(' '));\n\n            if (tspan.node().getComputedTextLength() > width) {\n                line.pop();\n                tspan.text(line.join(' '));\n                line = [word];\n\n                lineNumber += 1;\n\n                tspan = text.append('tspan')\n                    .attr('x', x)\n                    .attr('y', y)\n                    .attr('dx', dx + 'px')\n                    .attr('dy', lineNumber * lineHeight + 'px')\n                    .attr('text-anchor', 'begin')\n                    .text(word);\n            }\n        }\n    });\n}\n\n/*\n * Select an element and move it to the front of the stack\n */\nd3.selection.prototype.moveToFront = function() {\n    return this.each(function(){\n        this.parentNode.appendChild(this);\n    });\n};\n\n/*\n * Initially load the graphic\n * (NB: Use window.load to ensure all images have loaded)\n */\nwindow.onload = onWindowLoaded;\n",
			"file": "js/graphic.js",
			"file_size": 27449,
			"file_write_time": 131148298738379807,
			"settings":
			{
				"buffer_size": 27471,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "git st",
		"selected_items":
		[
			[
				"git st",
				"git: status"
			],
			[
				"Inst",
				"Package Control: Install Package"
			],
			[
				"Package Control: Remove Package",
				"Package Control: Remove Package"
			],
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"package control:remove pa",
				"Package Control: Remove Package"
			],
			[
				"unin",
				"Plugin Development: Profile Events"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 476.0
	},
	"console":
	{
		"height": 248.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/josh/graphics/pv-record-chart-editorial",
		"/home/josh/graphics/pv-record-chart-editorial/js"
	],
	"file_history":
	[
		"/home/josh/graphics/pv-record-chart-editorial/js/graphic.js",
		"/home/josh/graphics/pv-record-chart-editorial/pv-record-chart-editorial.sublime-project",
		"/home/josh/graphics/pv-record-chart/child.html",
		"/home/josh/.bashrc",
		"/home/josh/graphics/pv-record-chart/css/base.less",
		"/home/josh/graphics/pv-record-chart/js/templates.js",
		"/home/josh/graphics/pv-record-chart/pv-record-chart.sublime-project",
		"/home/josh/.config/sublime-text-3/Packages/User/SublimeLinter.sublime-settings",
		"/home/josh/.bash_profile",
		"/home/josh/Documents/IEEE Spectrum/Fact Checking and Copy Editing Instructions.md",
		"/home/josh/graphics/test-slopegraph/js/helpers.js",
		"/home/josh/dailygraphics/records.json",
		"/home/josh/graphics/test-line-graph/.gitignore",
		"/home/josh/Downloads/Models Project/js/main.js",
		"/home/josh/FoundationPress/assets/scss/global/_settings.scss",
		"/home/josh/FoundationPress/index.php",
		"/home/josh/FoundationPress/assets/scss/foundation.scss",
		"/home/josh/Fastpitch/_home.html",
		"/home/josh/FoundationPress/assets/scss/templates/_front.scss",
		"/home/josh/FoundationPress/page-templates/front.php",
		"/home/josh/FoundationPress/page-templates/page-full-width.php",
		"/home/josh/FoundationPress/page.php",
		"/home/josh/FoundationPress/single.php",
		"/home/josh/FoundationPress/header.php",
		"/home/josh/FoundationPress/assets/scss/modules/_navigation.scss",
		"/home/josh/FoundationPress/library/navigation.php",
		"/home/josh/FoundationPress/library/menu-walkers.php",
		"/home/josh/FoundationPress/library/custom-nav.php",
		"/home/josh/FoundationPress/assets/scss/templates/_page-default.scss",
		"/home/josh/FoundationPress/assets/scss/modules/_sidebar.scss",
		"/home/josh/FoundationPress/library/enqueue-scripts.php",
		"/home/josh/FoundationPress/assets/fonts/Bernhard_Gothic/Bernhard_Gothic.css",
		"/home/josh/FoundationPress/template-parts/content.php",
		"/home/josh/FoundationPress/library/entry-meta.php",
		"/home/josh/FoundationPress/gulpfile.js",
		"/home/josh/FoundationPress/package.json",
		"/home/josh/FoundationPress/assets/scss/modules/_footer.scss",
		"/home/josh/FoundationPress/template-parts/mobile-top-bar.php",
		"/home/josh/Fastpitch/wp-config.php",
		"/home/josh/FoundationPress/footer.php",
		"/home/josh/FoundationPress/assets/components/foundation-sites/scss/typography/_base.scss",
		"/home/josh/FoundationPress/assets/components/foundation-sites/scss/typography/_helpers.scss",
		"/home/josh/FoundationPress/node_modules/gulp-rsync/node_modules/through2/through2.js",
		"/home/josh/Downloads/MyFontsWebfontsKit/MyFontsWebfontsKit.css",
		"/home/josh/bookauthor_theme/wp-content/themes/bookauthor/footer.php",
		"/home/josh/bookauthor_theme/wp-content/themes/bookauthor/assets/scss/style.scss",
		"/home/josh/Fastpitch/.htaccess.orig",
		"/home/josh/Fastpitch/.htaccess",
		"/var/www/html/bookauthor_theme/wp-content/themes/FoundationPress/functions.php",
		"/var/www/html/bookauthor_theme/wp-content/themes/FoundationPress/template-parts/mobile-top-bar.php",
		"/var/www/html/bookauthor_theme/wp-content/themes/FoundationPress/library/foundation.php",
		"/var/www/html/bookauthor_theme/wp-content/themes/FoundationPress/library/menu-walkers.php",
		"/var/www/html/bookauthor_theme/wp-content/themes/FoundationPress/library/navigation.php",
		"/var/www/html/bookauthor_theme/wp-content/themes/FoundationPress/assets/components/foundation-sites/scss/components/_top-bar.scss",
		"/var/www/html/bookauthor_theme/wp-content/themes/FoundationPress/library/custom-nav.php",
		"/var/www/html/bookauthor_theme/wp-config.php",
		"/var/www/html/bookauthor_theme/wp-content/themes/FoundationPress/assets/scss/modules/_navigation.scss",
		"/home/josh/Downloads/blog.html",
		"/home/josh/bookauthor_theme/wp-content/themes/bookauthor/assets/vendor/foundation-sites/scss/_global.scss",
		"/home/josh/bookauthor_theme/wp-content/themes/bookauthor/assets/vendor/foundation-sites/scss/foundation.scss",
		"/home/josh/bookauthor_theme/wp-content/themes/bookauthor/assets/scss/modules/_header.scss",
		"/home/josh/bookauthor_theme/wp-content/themes/bookauthor/assets/scss/base/_layout.scss",
		"/home/josh/bookauthor_theme/wp-content/themes/bookauthor/assets/scss/_settings.scss",
		"/home/josh/bookauthor_theme/Gruntfile.js",
		"/home/josh/bookauthor_theme/wp-content/themes/bookauthor/assets/scss/_vendors.scss",
		"/home/josh/bookauthor_theme/wp-content/themes/bookauthor/lib/widgets.php",
		"/home/josh/bookauthor_theme/wp-content/themes/bookauthor/lib/optimizations.php",
		"/home/josh/bookauthor_theme/wp-content/themes/bookauthor/sidebar.php",
		"/home/josh/bookauthor_theme/wp-content/themes/bookauthor/functions.php",
		"/home/josh/bookauthor_theme/wp-config.php",
		"/home/josh/bookauthor_theme/wp-content/themes/bookauthor/assets/scss/modules/_accessibility.scss",
		"/home/josh/bookauthor_theme/node_modules/node-sass/README.md",
		"/home/josh/bookauthor_theme/bower.json",
		"/home/josh/bookauthor_theme/.bowerrc",
		"/home/josh/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/josh/.themes/Flatty flat/cinnamon/cinnamon.css",
		"/home/josh/.nvm/nvm.sh",
		"/home/josh/.config/sublime-text-3/Packages/User/.gitignore",
		"/home/josh/.config/sublime-text-3/Packages/User/Package Control.sublime-settings"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/home/josh/graphics/pv-record-chart",
			"/home/josh/graphics/pv-record-chart/",
			"/home/josh/dailygraphics/",
			"/home/josh/FoundationPress/assets/components/foundation-sites/scss",
			"/home/josh/FoundationPress/assets/components/foundation-sites/scss/grid",
			"/home/josh/FoundationPress",
			"/home/josh/FoundationPress/library",
			"/home/josh/FoundationPress/assets/components/foundation-sites/scss",
			"/home/josh/FoundationPress",
			"/home/josh/FoundationPress/assets/components/foundation-sites/scss/grid",
			"/home/josh/FoundationPress/assets/scss",
			"/home/josh/bookauthor_theme/wp-content/themes/bookauthor/lib",
			"/home/josh/bookauthor_theme/wp-content/themes/bookauthor/assets",
			"/home/josh/bookauthor_theme/wp-content/themes/bookauthor/assets/vendor/foundation-sites/scss",
			"/home/josh/bookauthor_theme/wp-content/themes/bookauthor"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"\"",
			"\"y\"",
			"COLORS",
			"table",
			"render",
			"rendertab",
			"},",
			", data:",
			"{ t",
			"voc",
			"institu",
			".join",
			"references",
			"group",
			"sendhe",
			"sendheig",
			"pymchild",
			"pym",
			"static:54",
			"static",
			"margins",
			"clear",
			"assets",
			"USE_ASSETS",
			"	",
			"font",
			"tooltip",
			"defs",
			"sun",
			"jsc",
			">\n",
			"rem",
			"datefo",
			"clear",
			"cell type",
			";\n",
			"show",
			"graphi",
			"fmt",
			"MOBILE_THRESHOLD",
			"default_",
			"default",
			"\"",
			"filter",
			"svg",
			"transition",
			"config",
			"config['data",
			"datatab",
			"\");\n",
			"disp",
			"ttofse",
			"tooltip",
			"svg",
			"parente",
			"chartelemen",
			"chartele",
			"graphic-",
			"info",
			"too",
			"header",
			"right",
			"send",
			"pymchild",
			"sendheight",
			"table",
			"filtered",
			"endvaluelab",
			"filtere",
			"fil",
			"filtered",
			"config",
			"colorSca",
			"labels",
			"attr('y')",
			".attr('y')",
			"wrap",
			"function ",
			"requests",
			"context",
			"copy",
			"make_context",
			"context",
			"airtable",
			"less",
			"_base",
			"compress",
			"cssin",
			"less",
			"reload",
			"copy_",
			"continueup",
			"continue",
			"update_",
			"AWS_ACCESS_KEY_ID",
			"AWS_SECRET",
			"StaticEl",
			"ArticleEl",
			"render_temp",
			"for",
			"copy",
			"max",
			"xscal",
			"dataser",
			"dataseries",
			"DATA",
			"render",
			"config",
			"date",
			"Field",
			"'date'",
			"onwin",
			"csv",
			"DATA",
			"Placeholder",
			"bord",
			"font-size",
			"background",
			"'background'",
			"background",
			"'background'",
			"background",
			"border",
			"doubl",
			"section",
			"-up-",
			"border",
			"parti"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "js/graphic.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27471,
						"regions":
						{
						},
						"selection":
						[
							[
								470,
								470
							]
						],
						"settings":
						{
							"git_savvy.file_path": "/home/josh/graphics/pv-record-chart-editorial/js/graphic.js",
							"git_savvy.repo_path": "/home/josh/graphics/pv-record-chart-editorial",
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.GitSavvy":
	{
		"height": 124.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 148.0
	},
	"pinned_build_system": "",
	"project": "pv-record-chart-editorial.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/graphics/pv-record-chart/pv-record-chart.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 300.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
